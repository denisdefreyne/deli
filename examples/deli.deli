import core;

fun assert(cond, msg) {
  if !cond {
    print "Assertion failure: ${msg}";
    core::exit(1);
  }
}

fun assert_equal(left, right) {
  assert(left == right, "Expected “${left}” to equal “${right}”");
}

fun assert_not_null(value) {
  assert(value != null, "Expected “${value}” not to be null");
}

struct Token {
  type,
  lexeme

  fun toString() {
    return "\"${this.lexeme}\"";
  }
}

struct VarStmt {
  ident,
  expr,

  fun toString() {
    return "(var ${this.ident.toString()} ${this.expr.toString()})";
  }
}

struct TrueExpr {
  fun toString() {
    return "(true)";
  }
}

assert_equal(
  "(true)",
  new TrueExpr().toString());

assert_equal(
  "(var \"enabled\" (true))",
  new VarStmt(
    ident=new Token(type="IDENT", lexeme="enabled"),
    expr=new TrueExpr()
  ).toString());
